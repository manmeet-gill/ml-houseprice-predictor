import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
from sklearn.ensemble import RandomForestRegressor

main_file_path = './train.csv' # this is the path to the Iowa data that you will use
data = pd.read_csv(main_file_path)

y=data.SalePrice

iowa_predictors_list=['LotArea', 'YearBuilt','1stFlrSF','2ndFlrSF','FullBath', 'BedroomAbvGr','TotRmsAbvGrd']

X = data[iowa_predictors_list]

iowa_model = DecisionTreeRegressor()

train_X, val_X, train_y, val_y = train_test_split(X,y, random_state=0)

iowa_model.fit(train_X,train_y)

print("Making predictions for the following 5 houses")
print(X.head())

print("The predictions are")
print(iowa_model.predict(X.head()))

predicted_prices = iowa_model.predict(val_X)
print("MAE is ",mean_absolute_error(val_y, predicted_prices))

def get_mae(max_leaf_nodes, predictors_train, predictors_val, targ_train, targ_val):
    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)
    model.fit(predictors_train, targ_train)
    preds_val =model.predict(predictors_val)
    mae = mean_absolute_error(targ_val, preds_val)
    return(mae)
list_errors=[]
for max_leaf_nodes in range(2, 100):
    my_mae =get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y)
    list_errors.append([my_mae,max_leaf_nodes])
    print("Max leaf nodes: %d  \t\t Mean Absolute Error: %d" %(max_leaf_nodes, my_mae))

print("minimum MAE using Decision Tree Regressor ",min(list_errors))

forest_model = RandomForestRegressor(random_state=1)
forest_model.fit(train_X,train_y)
model_preds = forest_model.predict(val_X)
print("Using Random Forest Regressor, MAE is ")
print(mean_absolute_error(val_y, model_preds))